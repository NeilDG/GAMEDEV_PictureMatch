using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Handles the game screen
/// Created By: NEIL DG
/// </summary>
public class GameScreen : View {

	[SerializeField] private PictureComponent pictureRefCopy;
	[SerializeField] private RectTransform pictureParent;

	// Use this for initialization
	void Start () {
		this.pictureRefCopy.gameObject.SetActive (false);

		this.InitializeGameBoard ();
	}

	/// <summary>
	/// Initializes the game board based from proposed picture models generated by game meachanic handler. Handles the pairing mechanism.  Guarantees that each model has a pair.
	/// </summary>
	private void InitializeGameBoard() {
		PictureModel[] generatedModels = GameMechanicHandler.Instance.GeneratePictureModels ();
		List<PictureComponent> pictureComponentList = new List<PictureComponent> ();

		for (int i = 0; i < generatedModels.Length * 2; i++) {
			GameObject pictureObject = GameObject.Instantiate (this.pictureRefCopy.gameObject, this.pictureParent);
			pictureObject.gameObject.SetActive (true);
			PictureComponent pictureComponent = pictureObject.GetComponent<PictureComponent> ();
			pictureComponent.Reset ();
			pictureComponentList.Add (pictureComponent);
		}
			
		for (int i = 0; i < generatedModels.Length; i++) {
			int firstIndex = Random.Range (0, pictureComponentList.Count);

			//assign first pair then remove it from the list
			pictureComponentList [firstIndex].AssignPictureModel (generatedModels [i]);
			pictureComponentList.RemoveAt (firstIndex);

			int secondIndex = Random.Range (0, pictureComponentList.Count);

			//assign second pair then remove it from the list
			pictureComponentList [secondIndex].AssignPictureModel (generatedModels [i]);
			pictureComponentList.RemoveAt (secondIndex);

		}
	}

	public void OnPauseClicked() {
		ViewHandler.Instance.Show (ViewNames.PAUSE_SCREEN_NAME);
	}

}
